#pragma once

/*==============================================================================
Base class for simulator synthetic image generators.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <opencv2/core/core.hpp>

#include "svSimImageGenParms.h"

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is a base class for simulator synthetic image generators.
// Different inheritors generate different kinds of images.
//
// It provides a common interface for specific inheritors and a parameters
// member variable.

class SimImageGenBase
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Parameters. These are read from a parms file.

   SimImageGenParms* mP;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Generate an image according to the parms.
   // This is supplied by inheriting classes.
   virtual void doGenerateImage(
      cv::Mat&       aImage)=0;          // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Create an image filled with all zeros.
   void doCreateZeroImage(
      cv::Mat&       aImage);            // Output
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


