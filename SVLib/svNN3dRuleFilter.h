#pragma once

/*==============================================================================
Nearest neighbor rule filter.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <opencv2/core/core.hpp>

#include "svImageWrapper.h"
#include "svNN3dRuleParms.h"

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is an image filter that filters pixels according to a set of rules
// that pertain to the nearest neighbors of the pixel.
//

class NN3dRuleFilter
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Parameters. These are read from a parms file.

   NN3dRuleParms* mP;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Images wrappers.
   ImageWrapper mInputD;
   ImageWrapper mInputC;
   ImageWrapper mInputU;
   ImageWrapper mOutput;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Images wrappers.
   int mRuleCount1;
   int mRuleCount2;
   int mRuleCount3;
   int mRuleCount4;
   int mRuleCount5;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   NN3dRuleFilter();
   NN3dRuleFilter(NN3dRuleParms* aParms);
   void initialize(NN3dRuleParms* aParms);
   void reset();
   void show();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Filter an image according to the parms.
   void doFilterImage(
      cv::Mat&       aInputD,              // Input
      cv::Mat&       aInputC,              // Input
      cv::Mat&       aInputU,              // Input
      cv::Mat&       aOutput);             // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.
private:
   // Filter a pixel.
   inline void doFilterHighPixel(RCIndex aX);
};


//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


