#pragma once

/*==============================================================================
Row and column index.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risCmdLineCmd.h"
#include "prnPrint.h"

#include "svRCSize.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class encapsulates a row column index pair. It contains row and
// column integer members.

class RCIndex
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   // Matrix row and column index pair.
   short int mRow;
   short int mCol;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   // Constructor.
   RCIndex()
   {
      mRow = 0;
      mCol = 0;
   }

   // Constructor.
   RCIndex(int aRow, int aCol)
   {
      mRow = aRow;
      mCol = aCol;
   }

   // Set.
   void reset()
   {
      mRow = 0;
      mCol = 0;
   }

   // Set.
   void set(int aRow, int aCol)
   {
      mRow = aRow;
      mCol = aCol;
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   // Show.
   void show(int aPrintFilter, char* aLabel)
   {
      Prn::print(aPrintFilter, "%-10s $$ %3d %3d",
         aLabel,
         mRow,
         mCol);
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Operators:

   // Equality.
   bool operator==(RCIndex& aRight)const
   {
      return
         (this->mRow == aRight.mRow) &&
         (this->mCol == aRight.mCol);

   }

   // Inequality.
   bool operator!=(RCIndex& aRight)const
   {
      return
         (this->mRow != aRight.mRow) ||
         (this->mCol != aRight.mCol);

   }

   // Increment.
   void operator+=(RCIndex& aRight)
   {
      this->mRow += aRight.mRow;
      this->mCol += aRight.mCol;
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Execute to read variables from a command line command. 
   void execute(Ris::CmdLineCmd* aCmd)
   {
      mRow = aCmd->argInt(1);
      mCol = aCmd->argInt(2);
   }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Sum, difference

// Add two indices.
inline RCIndex operator+(RCIndex aLeft, RCIndex aRight)
{
   RCIndex tIndex;
   tIndex.mRow = aLeft.mRow + aRight.mRow;
   tIndex.mCol = aLeft.mCol + aRight.mCol;
   return tIndex;
}

// Subtract two indices.
inline RCIndex operator-(RCIndex aLeft, RCIndex aRight)
{
   RCIndex tIndex;
   tIndex.mRow = aLeft.mRow - aRight.mRow;
   tIndex.mCol = aLeft.mCol - aRight.mCol;
   return tIndex;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace