/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include "svDefs.h"
#include "svImageWrapper.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor.

ImageWrapper::ImageWrapper(cv::Mat& aImage)
   : mImage(aImage)
{
}

ImageWrapper::ImageWrapper(cv::Mat* aImage)
   : mImage(*aImage)
{
}


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Element access.

uchar& ImageWrapper::at(RCIndex aPixel)
{
   return mImage.at<uchar>(aPixel.mRow, aPixel.mCol);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Return a scaled value such that 0..100.0 corresponds to 0..65535,
// the minimum to maximum range.

double ImageWrapper::getScaled(RCIndex aPixel)
{
   uchar tValue = mImage.at<uchar>(aPixel.mRow, aPixel.mCol);
   return tValue*cImageScale;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Set a scaled value such that 0..100.0 corresponds to 0..65535,
// the minimum to maximum range.

void ImageWrapper::setScaled(RCIndex aPixel, double aValue)
{
   double tDoubleValue = aValue/cImageScale;
   uchar tUCharValue = (uchar)round(tDoubleValue);
   mImage.at<uchar>(aPixel.mRow, aPixel.mCol) = tUCharValue;
}


//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
