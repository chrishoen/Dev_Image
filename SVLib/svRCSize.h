#pragma once

/*==============================================================================
SV namespace: sixdofs that are measured by a computer vision based system.
Row and column size.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risCmdLineCmd.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class encapsulates a rectangular size pair. It contains row and
// column size integer members.
//

class RCSize
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   short int mRows;
   short int mCols;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   RCSize()
   {
      mRows = 0;
      mCols = 0;
   }

   RCSize(int aRow,int aCol)
   {
      mRows = aRow;
      mCols = aCol;
   }

   void initialize(int aRow,int aCol)
   {
      mRows = aRow;
      mCols = aCol;
   }

   void set(int aRow, int aCol)
   {
      mRows = aRow;
      mCols = aCol;
   }

   void reset()
   {
      mRows = 0;
      mCols = 0;
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Operators:

   // Equality.
   bool operator==(RCSize aRight)const
   {
      return
         (this->mRows == aRight.mRows) &&
         (this->mCols == aRight.mCols);
   }

   // Inequality.
   bool operator!=(RCSize aRight)const
   {
      return
         (this->mRows != aRight.mRows) ||
         (this->mCols != aRight.mCols);
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Execute to read variables from a command line command. 
   void execute(Ris::CmdLineCmd* aCmd)
   {
      mRows = aCmd->argInt(1);
      mCols = aCmd->argInt(2);
   }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
