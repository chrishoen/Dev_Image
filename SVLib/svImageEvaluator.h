#pragma once

/*==============================================================================
Image evaluator.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <opencv2/core/core.hpp>

#include "svImageWrapper.h"
#include "svImageResults.h"

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class evaluates images.
// 

class ImageEvaluator
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Evaluation inputs and outputs.
   ImageWrapper   mInput;
   ImageResults*  mResults;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   ImageEvaluator();
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.
   
   // Evaluate the input image. Calculate the row and column metrics results.
   void doEvaluateImage(
      cv::Mat&       aImageD,     // Input
      ImageResults&  aResults);   // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.
private:
   // Evaluate a high pixel. Calculate the row and column metrics results.
   inline void doEvaluateHighPixel(RCIndex aX);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


