#pragma once

/*==============================================================================
Nearest neighbor rule filter.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <opencv2/core/core.hpp>

#include "svImageWrapper.h"
#include "svTileParms.h"

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is an image filter that filters pixels according to a set of rules
// that pertain to the nearest neighbors of the pixel.
//

class TileWriter
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Parameters. These are read from a parms file.

   TileParms* mP;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Image wrappers.
   ImageWrapper mOutput;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   TileWriter();
   TileWriter(TileParms* aParms);
   void initialize(TileParms* aParms);
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Write a tile to an image according to the parms.
   void doWrite(
      cv::Mat&       aOutput);      // Output

   // Write a tile to an image according to the parms.
   void doWrite(
      int            aLoopNum,      // Control
      cv::Mat&       aOutput);      // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Write a square tile according to the parms.
   void doWriteSquare();

   // Write a diamond tile according to the parms.
   void doWriteDiamond();
};


//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


