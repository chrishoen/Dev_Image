#pragma once

/*==============================================================================
Contour filter.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "svConArrayWriter.h"
#include "svConImageWriter.h"
#include "svConIndexListListWriter.h"
#include "svConLoIndexListWriter.h"
#include "svConParms.h"
#include "svConRecordArray.h"
#include "svConRecordList.h"
#include "svConRecordListWriter.h"
#include "svConShow.h"

#include "svRCIndexList.h"

namespace SV
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is an image filter that filters pixels in the contours of an image.
//

class ContourFilter
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Parameters. These are read from a parms file.

   ConParms* mP;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members. Variables, according to the main diagram.

   // Images.
   cv::Mat mInputImage;
   cv::Mat mOutputImage;

   // Containers.
   RCIndexListList   mIndexListList;
   RCIndexList       mHiIndexList;
   RCIndexList       mLoIndexList;
   ConRecordList     mHiRecordList;
   ConRecordList     mLoRecordList;
   ConRecordArray    mRecordArray;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members. Parameterized Functions, according to the main diagram.

   // Functions.
   ConIndexListListWriter  mIndexListListWriter;
   ConLoIndexListWriter    mLoIndexListWriter;
   ConRecordListWriter     mRecordListWriter;
   ConArrayWriter          mArrayWriter;
   ConImageWriter          mImageWriter;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   ContourFilter();
   ContourFilter(ConParms* aParms);
   void initialize(ConParms* aParms);
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Filter an image according to the parms.
   void doFilterImage(
      cv::Mat&       aInput,               // Input
      cv::Mat&       aOutput);             // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Show.
   void doShow(int aCode);
};


//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


