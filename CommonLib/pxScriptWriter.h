#pragma once
/*==============================================================================
printer eexecutive - script file writer
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <fstream>
#include <string>

namespace PX
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class encalsulates a script generator. It reads inputs  from a gcode
// file and writes outputs to a script file. The gcode file is generated by
// the slicer program. The script file is executed by the print sequencer
// thread.

class ScriptWriter
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   static const std::streamsize cMaxStringSize = 200;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // File descriptors.
   std::ifstream mGCodeFile;
   std::ofstream mScriptFile;

   // Slice file prefix file path.
   std::string mSliceFilePrefixPath;
   std::string mWorkDirPath;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   ScriptWriter();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Read from the gcode file. Write to the script file. For each input line
   // from the gcode file, write a corresponding set of script file output
   // lines. Return true if successful.
   bool doWrite(
      const std::string& aGCodeFilePath,           // Input
      const std::string& aSliceFilePrefixPath,     // Input
      const std::string& aWorkDirPath,             // Input
      const std::string& aScriptFilePath);         // Output

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Open the files. Return true if successful.
   bool doOpenFiles(
      const std::string& aGCodeFilePath,          
      const std::string& aScriptFilePath);

   // Close the files.
   void doCloseFiles();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // If the input gcode line is for an exit then return true.
   bool tryLineFor_Exit(std::string& aGCodeLine);

   // If the input gcode line is for a gcode send then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_Send(std::string& aGCodeLine);

   // If the input gcode line is for a slice then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_Slice(std::string& aGCodeLine);

   // If the input gcode line is for a pwm then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_PWM(std::string& aGCodeLine);

   // If the input gcode line is for a mark then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_Test(std::string& aGCodeLine);

   // If the input gcode line is for a state then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_State1(std::string& aGCodeLine);

   // If the input gcode line is for a state then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_State2(std::string& aGCodeLine);

   // If the input gcode line is for a state then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_State3(std::string& aGCodeLine);

   // If the input gcode line is for info then write the corresponding
   // commands to the output script file and return true.
   bool tryLineFor_Info(std::string& aGCodeLine);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace




