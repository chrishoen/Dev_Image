# copy the input image to the output image.
output_image = input_image_c.clone()

# loop through all of the pixels in the input image
# to filter the high pixels.
for xpixel in input_image_c:
   if input_image_c.at(xpixel) != 0
      filter_high_pixel(xpixel)
      
# filter a high pixel based on nearest neighbor rules.
def filter_high_pixel(x):
   # calculate class varaibles.
   calculate_classes(x)
   
   # RULE 1.
   # If not on a horizontal edge.
   #
   # pass
   # o o o   o x o   o o o      o o o   o o o
   # o o o   x x x   o o o      x x x   x x x
   # o o o   o x o   o o o      o o o   o o o
   # S=1     S=2     S=3        R=2     C=2
   #   
   if (class_s == 0x01):
      return 

   # RULE 2.
   # If on a vertical plane and slice class is 4 or 5.
   #
   # pass                  
   # . . x   . . x   . . x      . x x   . x x
   # . x x   . x x   . x x      . x x   . x x
   # . x x   . x x   . x x      . x x   . x x
   # S=1     S=2     S=3        R=2     C=2
   #
   if (class_r == 0x02 and class_s >= 0x40):
      output_image.at(x) = parms.hc1
      return 

   # RULE 3.
   # If on a vertical plane and any other.
   #
   # pass                  
   # . . .   . . .   . . .      . . .   . . .
   # . x x   . x x   . x x      . x x   . x x
   # . x x   . x x   . x x      . x x   . x x
   # S=1     S=2     S=3        R=2     C=2
   #
   if (class_r == 0x02):
      return 

   # RULE 4.
   # If not on a vertical plane and row or column class is 4 or 5.
   #
   # pass
   # . . .   . . .   x x x      . . .   . . x
   # . . .   . x x   x x x      . x x   . x x
   # . . x   . x x   x x x      x x x   . x x
   # S=1     S=2     S=3        R=2     C=2
   #
   if (max(class_r,class_c >= 0x40):
      output_image.at(x) = parms.hc2
      return 

   # RULE 5.
   # Any other.
   #
   # pass
   # . . .   . . x   . . .      . . x   . . .
   # . . x   . x x   . . x      . x x   . x .
   # . . .   . . x   . . .      . . x   . . .
   # S=1     S=2     S=3        R=2     C=2
   #
      return 
