# D            C           U
# NW NN DNE    NW NN NE    NW NN NE
# WW XX DEE    WW XX EE    WW XX EE
# SW SS DSE    SW SS SE    SW SS SE
#
# D down       N north 
# C current    S south
# U up         E east
#              W west

   
# copy the input image to the output image.
output_image = input_image_c.clone()

# loop through all of the pixels in the input image
# to filter the high pixels.
for xpixel in input_image_c:
   if input_image_c.at(xpixel) != 0
      filter_high_pixel(xpixel)
      
# filter a high pixel based on nearest neighbor rules.
def filter_high_pixel(x):
   # extract nearest neighbors.
   # DNW DNN DNE    CNW CNN CNE    UNW UNN UNE
   # DWW DXX DEE    CWW CXX CEE    UWW UXX UEE
   # DSW DSS DSE    CSW CSS CSE    USW USS USE
   
   CNW = input_image_c(x.row-1,x.col-1) != 0
   CNN = input_image_c(x.row-1,x.col  ) != 0
   CNE = input_image_c(x.row-1,x.col+1) != 0
   CWW = input_image_c(x.row  ,x.col-1) != 0
   CXX = input_image_c(x.row  ,x.col  ) != 0
   CEE = input_image_c(x.row  ,x.col+1) != 0
   CSW = input_image_c(x.row+1,x.col-1) != 0
   CDU = input_image_c(x.row+1,x.col  ) != 0
   CSE = input_image_c(x.row+1,x.col+1) != 0

   DXX = input_image_d(x.row  ,x.col  ) != 0
   UXX = input_image_u(x.row  ,x.col  ) != 0

   # RULE 1.
   # If not on a contour of the current image.
   if (CNN and CSS and CEE and CWW):
      return 

   # RULE 2.
   # If on a vertical plane parallel to NS or ES.
   if (UXX and DXX) and ((CNN and CSS) or (CEE and CWW)):
      return 

   # count the number of horizontal nearest neighbors.
   CNN_sum = CNW + CNN + CNE + CWW + CEE + CSW + CSS + CSE
      
   # RULE 3.
   # If on a vertical plane not parallel to NS or ES and
   # at a horizontal corner.
   if (UXX and DXX) and (CNN_sum <= 3)):
      return 

   # RULE 4.  
   # If on a vertical plane not parallel to NS or ES and
   # not at a horizontal corner.
   if (UXX and DXX):
      output_image.at(x) = parms.hc1
      return

   # RULE 5.
   # Otherwise not on a vertical plane.
   output_image.at(x) = parms.hc2
   return
