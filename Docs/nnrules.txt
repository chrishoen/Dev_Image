# copy the input image to the output image.
output_image = input_image.clone()

# loop through all of the pixels in the input image
# to filter the high pixels.
for xpixel in input_image:
   if input_image.at(xpixel) != 0
      filter_high_pixel(xpixel)
      
# filter a high pixel based on nearest neighbor rules.
def filter_high_pixel(x):
   # extract nearest neighbors
   # NW NN NE
   # WW XX EE
   # SW SS SE
   
   NW = input_image(x.row-1,x.col-1) != 0 # up left
   NN = input_image(x.row-1,x.col  ) != 0 # up upper
   NE = input_image(x.row-1,x.col+1) != 0 # up right
   WW = input_image(x.row  ,x.col-1) != 0 # left
   XX = input_image(x.row  ,x.col  ) != 0 # center
   EE = input_image(x.row  ,x.col+1) != 0 # right
   SW = input_image(x.row+1,x.col-1) != 0 # down left
   DU = input_image(x.row+1,x.col  ) != 0 # down upper
   SE = input_image(x.row+1,x.col+1) != 0 # down right

   # rule 1.
   # x x x   . . .   x . .
   # x x x   x x x   x x x
   # x x x   x x x   x x .
   
   if WW and EE:
      return
      
   # rule 2.
   # . x x   . x x   . x .
   # . x x   x x x   x x x
   # . x x   x x x   x x x
   if NN and SS:
      return 

   # count the number of nearest neighbors that are occupied.
   # . . x   . x x   . x .
   # . x x   . x x   x x x
   # . . x   . x x   x x x
   NN_sum = NW + NN + NE + WW + EE + SW + SS + SE

   # rule 3.
   if NN_sum <= 3:
      output_image.at(x) = parms.hc1
      return
     
   # rule 4.  
   # . . x   . . x   . x .
   # . x x   . x x   . x x
   # x x x   . x x   . x x
   output_image.at(x) = parms.hc2

